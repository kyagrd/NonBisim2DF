 % vim: sw=2: ts=2: expandtab: ai: syntax=lprolog

%% Simulation, bisimulation, and a modal logic for the pi-calculus
%%
%% Given that the meta-logic of Abella is intuitionistic, the
%% specification of bisimulation here corresponds to open bisimulation.
%%
%% Here we prove here that simulation is preorder and bisimulation is an
%% equivalence relation. We also establish that bisimulation implies
%% modal logic equivalence and demonstrate partially mechanized proof
%% development for proving that logic equivalence implies bisimulation.

Specification "finite-pic".
%Set subgoals off.
% Simulation defined

CoDefine sim : p -> p -> prop by
  sim P Q :=
    (forall A P1, {one P A P1} -> exists Q1, {one Q A Q1} /\ sim P1 Q1) /\
    (forall X M, {oneb P (dn X) M} -> exists N, {oneb Q (dn X) N} /\
                                                forall W, sim (M W) (N W)) /\
    (forall X M, {oneb P (up X) M} -> exists N, {oneb Q (up X) N} /\
                                                nabla w, sim (M w) (N w)).

% Simulation is a preorder

Theorem sim_refl : forall P, sim P P.
coinduction. intros. unfold.
  intros. apply CH with P = P1. search.
  intros. exists M. split. search.
    intros. apply CH with P = M W. search.
  intros. exists M. split. search.
    intros. apply CH with P = M n1. search.

Theorem sim_trans : forall P Q R, sim P Q -> sim Q R -> sim P R.
coinduction. intros. case H1. case H2. unfold.
  intros. apply H3 to H9. apply H6 to H10. apply CH to H11 H13. search.
  intros. apply H4 to H9. apply H7 to H10.
  exists N1. split. search.
    intros. apply H11 with W = W. apply H13 with W = W.
    apply CH to H14 H15. search.
  intros. apply H5 to H9. apply H8 to H10.
  apply CH to H11 H13. search.

% Bisimulation defined

CoDefine bisim : p -> p -> prop by
  bisim P Q :=
    (forall A P1, {one P A P1} -> exists Q1, {one Q A Q1} /\ bisim P1 Q1) /\
    (forall X M, {oneb P (dn X) M} -> exists N, {oneb Q (dn X) N} /\
                                                forall W, bisim (M W) (N W)) /\
    (forall X M, {oneb P (up X) M} -> exists N, {oneb Q (up X) N} /\
                                                nabla w, bisim (M w) (N w)) /\
    (forall A Q1, {one Q A Q1} -> exists P1, {one P A P1} /\ bisim Q1 P1) /\
    (forall X N, {oneb Q (dn X) N} -> exists M, {oneb P (dn X) M} /\
                                                forall W, bisim (N W) (M W)) /\
    (forall X N, {oneb Q (up X) N} -> exists M, {oneb P (up X) M} /\
                                                nabla w, bisim (N w) (M w)).

Define nbisim : p -> p -> prop by
  nbisim P Q :=
    (exists A P1, {one P A P1} /\ forall Q1, {one Q A Q1} -> nbisim P1 Q1) \/
    (exists X M, {oneb P (dn X) M} /\ forall N, {oneb Q (dn X) N} ->
                                                exists W, nbisim (M W) (N W)) \/
    (exists X M, {oneb P (up X) M} /\ forall N, {oneb Q (up X) N} ->
                                                nabla w, nbisim (M w) (N w)) \/
    (exists A Q1, {one Q A Q1} /\ forall P1, {one P A P1} -> nbisim Q1 P1) \/
    (exists X N, {oneb Q (dn X) N} /\ forall M, {oneb P (dn X) M} ->
                                                exists W, nbisim (N W) (M W)) \/
    (exists X N, {oneb Q (up X) N} /\ forall M, {oneb P (up X) M} ->
                                                nabla w, nbisim (N w) (M w)).





% Bisimulation is an equivalence

Theorem bisim_refl : forall P, bisim P P.
coinduction. intros. unfold.
  intros. apply CH with P = P1. search.
  intros. exists M. split. search.
    intros. apply CH with P = M W. search.
  intros. exists M. split. search.
    intros. apply CH with P = M n1. search.
  intros. apply CH with P = Q1. search.
  intros. exists N. split. search.
    intros. apply CH with P = N W. search.
  intros. exists N. split. search.
    intros. apply CH with P = N n1. search.

Theorem bisim_sym : forall P Q, bisim P Q -> bisim Q P.
intros. case H1. unfold.
  intros. apply H5 to H8. search.
  intros. apply H6 to H8. search.
  intros. apply H7 to H8. search.
  intros. apply H2 to H8. search.
  intros. apply H3 to H8. search.
  intros. apply H4 to H8. search.

Theorem bisim_trans : forall P Q R, bisim P Q -> bisim Q R -> bisim P R.
coinduction. intros. case H1. case H2. unfold.
  intros. apply H3 to H15. apply H9 to H16. apply CH to H17 H19. search.

  intros. apply H4 to H15. apply H10 to H16.
  exists N1. split. search.
  intros. apply H17 with W = W. apply H19 with W = W.
  apply CH to H20 H21. search.

  intros. apply H5 to H15. apply H11 to H16.
  apply CH to H17 H19. search.

  intros. apply H12 to H15. apply H6 to H16. apply CH to H17 H19. search.

  intros. apply H13 to H15. apply H7 to H16.
  exists M1. split. search.
  intros. apply H17 with W = W. apply H19 with W = W.
  apply CH to H20 H21. search.

  intros. apply H14 to H15. apply H8 to H16.
  apply CH to H17 H19. search.

Theorem nbisim_consistent : forall P Q, bisim P Q -> nbisim P Q -> false.
% Proof.
  induction on 2. intros. case H1. case H2. case H9.
    apply H3 to H10. apply H11 to H12. backchain IH.
    apply H4 to H10. apply H11 to H12. apply H13 with W = W. backchain IH.
    apply H5 to H10. apply H11 to H12. apply IH to H13 H14.
    apply H6 to H10. apply H11 to H12. backchain IH.
    apply H7 to H10. apply H11 to H12. apply H13 with W = W. backchain IH.
    apply H8 to H10. apply H11 to H12. apply IH to H13 H14.
% Q.E.D.


Kind o'                  type.
Type tt, ff              o'.
Type conj, disj          o' -> o' -> o'.
Type boxMat  n -> n -> o' -> o'.
Type mat     n -> n -> o'.
Type boxAct, diaAct      a -> o' -> o'.
Type boxOut, diaOut,
     boxIn, diaIn      n -> (n -> o') -> o'.

Define sat : p -> o' -> prop
by
 ; sat P tt := true
 ; sat P (conj A B) := sat P A /\ sat P B
 ; sat P (disj A B) := sat P A \/ sat P B
 ; sat P (boxMat X Y A) := X = Y -> sat P A
 ; sat P (mat X Y) := X = Y
 ; sat P (boxAct X A) := forall P1, {one P X P1} -> sat P1 A
 ; sat P (diaAct X A) := exists P1, {one P X P1} /\ sat P1 A
 ; sat P (boxOut X A) := forall Q, {oneb P (up X) Q} -> nabla w, sat (Q w) (A w)
 ; sat P (diaOut X A) := exists Q, {oneb P (up X) Q} /\ nabla w, sat (Q w) (A w)
 ; sat P (boxIn X A) := forall Q, {oneb P (dn X) Q} -> forall w, sat (Q w) (A w)
 ; sat P (diaIn X A) := exists Q, {oneb P (dn X) Q} /\ forall w, sat (Q w) (A w)
 .

Theorem dist_form0 : forall P Q,
  ((forall F, sat P F -> sat Q F) -> false) \/
  ((forall F, sat Q F -> sat P F) -> false) ->
  ((forall F, (sat P F -> sat Q F) /\ (sat Q F -> sat P F)) -> false).
% Proof.
   intros. case H1.
   backchain H3. intros. apply H2 with F = F. backchain H5.
   backchain H3. intros. apply H2 with F = F. backchain H6.
% Q.E.D.

Theorem dist_form_both0: forall P Q, 
  (forall F, (sat P F -> sat Q F) /\ (sat Q F -> sat P F)) ->
  ((forall F, sat P F -> sat Q F) -> false) ->
  ((forall F, sat Q F -> sat P F) -> false).
% Proof.
  intros. backchain H2. intros. apply H1 with F = F. backchain H5.
% Q.E.D.

Theorem dist_form2 : forall (P : n -> n -> p) (Q : n -> n -> p),
  ((forall F, (forall X Y, sat (P X Y) (F X Y) -> sat (Q X Y) (F X Y))) -> false) \/
  ((forall F, (forall X Y, sat (Q X Y) (F X Y) -> sat (P X Y) (F X Y))) -> false) ->
  ((forall F, (forall X Y, sat (P X Y) (F X Y) -> sat (Q X Y) (F X Y))
           /\ (forall X Y, sat (Q X Y) (F X Y) -> sat (P X Y) (F X Y))) -> false).
% Proof.
  intros. case H1.
  backchain H3. intros. apply H2 with F = F. backchain H5.
  backchain H3. intros. apply H2 with F = F. backchain H6.
% Q.E.D.

Theorem dist_form_both2: forall (P : n -> n -> p) (Q : n -> n -> p),
  (forall F, (forall X Y, sat (P X Y) (F X Y) -> sat (Q X Y) (F X Y))
          /\ (forall X Y, sat (Q X Y) (F X Y) -> sat (P X Y) (F X Y))) ->
  ((forall F, (forall X Y, sat (P X Y) (F X Y) -> sat (Q X Y) (F X Y))) -> false) ->
  ((forall F, (forall X Y, sat (Q X Y) (F X Y) -> sat (P X Y) (F X Y))) -> false).
% Proof.
  intros. backchain H2. intros. apply H1 with F = F. backchain H5.
% Q.E.D.

Theorem example1 : forall x y,
  sat (match x y (taup null)) (conj (boxMat x y (diaAct tau tt))
                                    (boxAct tau (mat x y))).
% Proof.
  intros. unfold.
    unfold. intros. case H1. search.
    unfold. intros. case H1. case H2. search.
% Q.E.D.

Theorem example1a : forall x y,
  sat (plus (taup null) null) (conj (boxMat x y (diaAct tau tt))
                                    (boxAct tau (mat x y))).
  intros. unfold.
    % Subgoal 1
    search.
    % Subgoal 2
    unfold. intros. case H1.
      % Subgoal 2.1
      case H2. unfold.
        % Subgoal 2.1.1
        % % Variables: x y
        % % ============================ cannot prove stuck here
        % %  x = y
        skip.
      % Subgoal 2.2
      case H2.


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% From here, Soundness (bisim implies logical equivalaence) proof is
% completely mechanized in Abella.				 
%
% In fact, bisim_sat0 is enough because bisimulation is closed under
% input prefixes and to induct over the case of the input prefix,
% it introduces more free variables in the inductive case. Thus,
% in order to prove n free variable case you essentially need to
% prove the case for n+1 free variables. We are showing bisim_sat2
% just for the purpose of demonstration, not becuase it is really
% necessary for generality of the proof.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
				     
Theorem bisim_sat0_L : forall P Q F, bisim P Q -> sat P F -> sat Q F.
% Proof.
  induction on 2.
  intros. case H2.
  % Subgoal 1
  search.
  % Subgoal 2
  unfold. backchain IH.  backchain IH.
  % Subgoal 3
  unfold. case H3. left. backchain IH. right. backchain IH.
  % Subgoal 4
  unfold. intros. backchain IH. backchain H3.
  % Subgoal 5
  unfold. search. 
  % Subgoal 6
  unfold. intros. case H1. apply H8 to H4. apply H3 to H11.
  backchain IH. apply bisim_sym. backchain H14.
  % Subgoal 7
  unfold. case H1. apply H5 to H3. exists Q2. split. search. backchain IH.
  % Subgoal 8
  unfold. intros. case H1. apply H10 to H4. apply H3 to H11.
  apply bisim_sym to H12. backchain IH.
  % Subgoal 9
  unfold. case H1. apply H7 to H3. exists N. split. search. intros. backchain IH.
  % Subgoal 10
  unfold. intros. case H1. apply H9 to H4. apply H3 to H11. assert bisim (M w) (Q1 w).
  backchain bisim_sym. backchain H12. backchain IH. backchain H13.
  % Subgoal 11
  unfold. case H1. apply H6 to H3. exists N. split. search. intros.
  assert bisim (Q1 w) (N w). backchain H12. backchain IH. backchain H4.
% Q.E.D.

Theorem bisim_sat0_R : forall P Q F, bisim P Q -> sat Q F -> sat P F.
% Proof.
  intros.
  apply bisim_sym to H1.
  backchain bisim_sat0_L.
% Q.E.D.

Theorem bisim_sat0 : forall P Q F,
  bisim P Q -> ((sat P F -> sat Q F) /\ (sat Q F -> sat P F)).
% Proof.
intros. split.
  intros. backchain bisim_sat0_L.
  intros. backchain bisim_sat0_R.
% Q.E.D.

Theorem bisim_sat2_L : forall P Q (F : n -> n -> o'),
  (forall X Y, bisim (P X Y) (Q X Y)) ->
  (forall X Y, sat (P X Y) (F X Y)) -> (forall X Y, sat (Q X Y) (F X Y)).
% Proof.
  intros.
  assert bisim (P X Y) (Q X Y). backchain H1.
  assert sat (P X Y) (F X Y). backchain H2.
  backchain bisim_sat0_L.
% Q.E.D.

Theorem bisim_sat2_R : forall P Q (F : n -> n -> o'),
  (forall X Y, bisim (P X Y) (Q X Y)) ->
  (forall X Y, sat (Q X Y) (F X Y)) -> (forall X Y, sat (P X Y) (F X Y)).
% Proof.
  intros.
  assert bisim (P X Y) (Q X Y). backchain H1.
  assert sat (Q X Y) (F X Y). backchain H2.
  backchain bisim_sat0_R.
% Q.E.D.

Theorem bisim_sat2 : forall P Q (F : n -> n -> o'),
  (forall X Y, bisim (P X Y) (Q X Y)) ->
  (  ((forall X Y, sat (P X Y) (F X Y)) -> (forall X Y, sat (Q X Y) (F X Y)))
  /\ ((forall X Y, sat (Q X Y) (F X Y)) -> (forall X Y, sat (P X Y) (F X Y)))).
% Proof.
  intros. split.
    %
    intros.
    assert bisim (P X Y) (Q X Y). backchain H1.
    assert sat (P X Y) (F X Y). backchain H2.
    backchain bisim_sat0_L.
    %
    intros.
    assert bisim (P X Y) (Q X Y). backchain H1.
    assert sat (Q X Y) (F X Y). backchain H2.
    backchain bisim_sat0_R.
% Q.E.D.

Theorem bisim_sat2_L_ : forall P Q (F : n -> n -> o'),
  (forall X, nabla y, bisim (P X y) (Q X y)) ->
  (forall X, nabla y, sat (P X y) (F X y)) -> (forall X, nabla y, sat (Q X y) (F X y)).
% Proof.
  intros.
  apply H1 with X = X. apply H2 with X = X.
  backchain bisim_sat0_L.
% Q.E.D.

Theorem bisim_sat2_R_ : forall P Q (F : n -> n -> o'),
  (forall X, nabla y, bisim (P X y) (Q X y)) ->
  (forall X, nabla y, sat (Q X y) (F X y)) -> (forall X, nabla y, sat (P X y) (F X y)).
% Proof.
  intros.
  apply H1 with X = X. apply H2 with X = X.
  backchain bisim_sat0_R.
% Q.E.D.

Theorem bisim_sat2_ : forall P Q (F : n -> n -> o'),
  (forall X, nabla y, bisim (P X y) (Q X y)) ->
  (  ((forall X, nabla y, sat (P X y) (F X y)) -> (forall X, nabla y, sat (Q X y) (F X y)))
  /\ ((forall X, nabla y, sat (Q X y) (F X y)) -> (forall X, nabla y, sat (P X y) (F X y)))).
% Proof.
  intros. split.
    %
    intros.
    apply H1 with X = X. apply H2 with X = X.
    backchain bisim_sat0_L.
    %
    intros.
    apply H1 with X = X. apply H2 with X = X.
    backchain bisim_sat0_R.
% Q.E.D.

%% End of soundness proofs %% 

 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Example judgement that is necessary and suffficient
%% to the Excluded Middle over names 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
Theorem excl_middle1 :
  (forall (x : n) (y : n), x = y \/ (x = y -> false))
  ->  
  forall x y, sat (plus (taup null) (taup (taup null)))
                  (diaAct tau (conj (boxAct tau (mat x y) )
                                    (boxMat x y (diaAct tau tt)) ) ).
intros.
apply H1 with x = x, y = y.
case H2.
search.
unfold.
exists null.
split.
search.
unfold.
unfold.
intros.
case H4.
unfold.
intros.
apply H3 to H4.

Theorem excl_middle2 :
  (forall x y, sat (plus (taup null) (taup (taup null)))
                   (diaAct tau (conj (boxAct tau (mat x y) )
                                     (boxMat x y (diaAct tau tt) ) ) ) )
  ->
  (forall (x : n) (y : n), x = y \/ (x = y -> false)).
intros.
apply H1 with x = x, y = y.
case H2.
case H3.
case H5.
case H4.
right.
intros.
case H8.
case H7.
apply H9 to _.
case H10.
case H11.
case H5.
case H4.
case H6.
apply H8 to _ with P1 = null.
case H9.
search.

Theorem newexample1 : forall x y, (x = y \/ (x = y -> false)) ->   
   sat (plus (plus (taup null) (taup (taup null))) (match x y (taup null)))
       (boxAct tau (disj (diaAct tau tt) (boxAct tau ff))).
intros. unfold. intros. case H2.
case H1.
	case H3. case H4. unfold. right. unfold. intros. case H5. case H4. unfold. left. search.
	case H3. case H5. unfold. right. unfold. intros. case H6. case H5. search.
case H1.
	case H3. case H4. unfold. right. unfold. intros. case H5.      
	case H3. case H5. unfold. right. unfold. intros. case H6.


Theorem newexample2 : forall x y,  
   sat (plus (plus (taup null) (taup (taup null))) (match x y (taup null)))
       (boxAct tau (disj (diaAct tau tt) (boxAct tau ff)))
   -> (x = y \/ (x = y -> false)).
intros. case H1.
assert {one (plus (plus (taup null) (taup (taup null))) (match x y (taup null))) tau (taup null)}
	-> (x = y \/ (x = y -> false)).
intros. case H3. search. search.
search.