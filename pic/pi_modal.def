% vim: syntax=bedwyr: sw=2: ts=2: expandtab: ai:
%
% A specification of Modal Logic for pi-calculus.
% Based on the paper
%  "Modal logics for mobile processes", by R. Milner, J. Parrow and D. Walker
%  Theoretical Computer Science 114 (1993).
%
% This definition file implements the specification of MPW modal logic
% described in the paper:
%  Alwen Tiu. Model checking for pi-calculus using proof search.
%  Available online from http://rsise.anu.edu.au/~tiu
%
% Dependency: this file needs the pi.def (definition of late transition
% system for pi-calculus)

% Assume the formulas in the modal logic are in negation normal form.
%
%
% The types of the logical constants:
%
% Formulas of MPW logic are given type form.
% Propositional connectives:
%  land : form -> form -> form  (conjunction)
%  lor : form -> form -> form   (disjunction)
%  top : form  (true)
%  bot : form (false)
%
% The prefix 'dia' indicates the 'diamond' modality and 'box' indicates
% the box modality.
% 'Free' modalities:
%   boxMatch : name -> name -> form -> form. (match modality, e.g., [x = y] A)
%   diaMatch : name -> name -> form -> form. (diamond, e.g., <x=y> A)
%   boxAct, diaAct : action -> form -> form. (free actions)
%   boxOut, diaOut : name -> (name -> form) -> form. (bound output)
%   boxIn, diaIn   : name -> (name -> form) -> form. (bound input)
%   boxInL, diaInL : name -> (name -> form) -> form. ('late' bound input)
%   boxInE, diaInE : name -> (name -> form) -> form. ('early' bound input)

#include "pi.def".
#include "../ccs/basic.def".

Kind form                type.
Type top, bot            form.
Type land, lor           form -> form -> form.
Type boxMatch, boxDiff,       
     diaMatch, diaDiff   name -> name -> form -> form.
Type boxAct, diaAct      a -> form -> form.
Type boxOut, diaOut,
     boxIn, diaIn,
     boxInL, diaInL,
     boxInE, diaInE      name -> (name -> form) -> form.

% A "lazy" but incomplete encoding.

Define inductive diff : name -> name -> list (name * name) -> prop
by diff X Y C := _if (X = Y) false (det_mem (X,Y) C).

Define inductive sat : list (name * name) -> p -> form -> prop
by sat _ _ top
 ; sat C P (land A B) := sat C P A /\ sat C P B
 ; sat C P (lor A B) := sat C P A \/ sat C P B
 ; sat C P (boxMatch X Y A) := (X = Y) -> sat C P A
 ; sat C P (diaMatch X Y A) := (X = Y) /\ sat C P A
 ; sat C P (boxDiff X Y A) := sat ((X,Y) :: C) P A
 ; sat C P (diaDiff X Y A) := diff X Y C /\ sat C P A
 ; sat C P (boxAct X A) := forall P1, one P X P1 -> sat C P1 A
 ; sat C P (diaAct X A) := exists P1, one P X P1 /\ sat C P1 A
 ; sat C P (boxOut X A) :=
      forall Q, onep P (up X) Q -> nabla y, sat C (Q y) (A y)
 ; sat C P (diaOut X A) :=
      exists Q, onep P (up X) Q /\ nabla y, sat C (Q y) (A y)
 ; sat C P (boxIn X A) :=
      forall Q, onep P (dn X) Q -> forall y, sat C (Q y) (A y)
 ; sat C P (diaIn X A) :=
      exists Q, onep P (dn X) Q /\ exists y, sat C (Q y) (A y)
 ; sat C P (boxInL X A) :=
      forall Q, onep P (dn X) Q -> exists y, sat C (Q y) (A y)
 ; sat C P (diaInL X A) :=
      exists Q, onep P (dn X) Q /\ forall y, sat C (Q y) (A y)
 ; sat C P (boxInE X A) :=
      exists y, forall Q, onep P (dn X) Q -> sat C (Q y) (A y)
 ; sat C P (diaInE X A) :=
      forall y, exists Q, onep P (dn X) Q /\ sat C (Q y) (A y)
 .


% A complete encoding: using explicit list of names.

Define inductive lsat : list name -> list (name * name) -> p -> form -> prop
by lsat _ C _ top
 ; lsat L C P (land A B) := lsat L C P A /\ lsat L C P B
 ; lsat L C P (lor  A B) := lsat L C P A \/ lsat L C P B
 ; lsat L C P (boxMatch X Y A) := (X = Y) -> lsat L C P A
 ; lsat L C P (diaMatch X Y A) := (X = Y) /\ lsat L C P A
 ; lsat L C P (boxDiff X Y A) := lsat L ((X,Y) :: C) P A
 ; lsat L C P (diaDiff X Y A) := diff X Y C /\ lsat L C P A
 ; lsat L C P (boxAct X A) := forall P1, one P X P1 -> lsat L C P1 A
 ; lsat L C P (diaAct X A) := exists P1, one P X P1 /\ lsat L C P1 A
 ; lsat L C P (boxOut X A) :=
     forall Q, onep P (up X) Q -> nabla y, lsat (y :: L) C (Q y) (A y)
 ; lsat L C P (diaOut X A) :=
     exists Q, onep P (up X) Q /\ nabla y, lsat (y :: L) C (Q y) (A y)
 ; lsat L C P (boxIn X A) :=
     forall Q, onep P (dn X) Q ->
       nabla w, forall y, (member y (w :: L) -> lsat (w :: L) C (Q y) (A y))
 ; lsat L C P (diaIn X A) :=
     exists Q, onep P (dn X) Q /\
       nabla w, exists y, (member y (w :: L) /\ lsat (w :: L) C (Q y) (A y))
 ; lsat L C P (boxInL X A) :=
     forall Q, onep P (dn X) Q ->
       nabla w, exists y, (member y (w :: L) /\ lsat (w :: L) C (Q y) (A y))
 ; lsat L C P (diaInL X A) :=
     exists Q, onep P (dn X) Q /\
       nabla w, forall y, (member y (w :: L) -> lsat (w :: L) C (Q y) (A y))
 ; lsat L C P (boxInE X A) :=
     nabla w, exists y, (member y (w :: L) /\
                forall Q, onep P (dn X) Q -> lsat (w :: L) C (Q y) (A y))
 ; lsat L C P (diaInE X A) :=
     nabla w, forall y, member y (w :: L) ->
                exists Q, onep P (dn X) Q /\ lsat (w :: L) C (Q y) (A y)
 .

% Some examples ===============================================================

% Encoding the judgment x(y).0 |= <x(u)>[x = u] false.
Define assert : nat -> form -> prop by
  % This judgment should be provable in MPW logic
  assert  1 (diaIn x (u\ (boxMatch x u bot)));
  % The 'excluded middle' on names
  assert  2
    (diaInL x (y\ diaInL x (u\ lor (diaMatch y u top) (boxMatch y u bot))));
  % Process 3 and 4 are strongly bisimilar, hence should satisfy
  % the same set of assertions.
  % <x(y)>^L (<tau><tau> true ; <tau> true).
  assert  3 (diaInL x (y\ lor (diaAct tau (diaAct tau top))
                            (diaAct tau top))) ; 
  % Assertions to test tabling behaviours
  assert 4 (boxOut a (m\ boxIn a (x\ boxOut a (n\ boxMatch x m bot)))) ; 
  assert 5 (boxOut a (m\ boxIn a (x\ boxOut a (n\ boxMatch x n bot)))).

Define process : nat -> p -> prop
by process 1 (in x (y\ z))
 ; process 2 (in x (y\ in x u\ z))
 ; process 3 (in x u\ (plus (taup (taup z)) (taup z)))
 ; process 4 (in x u\ nu y\ ((plus (taup (taup z))
                            (plus (taup z)
                                  (taup (match u y (taup z) z))))))
 ; process 5 (nu m\ out a m (in a (x\ nu n\ out a n z)))
 ; process 6 (in x u\ in x v\ (match u v (taup z) z))
 ; process 7 (in x u\ in x y\ taup z)
 .



% Counterexample to the completeness of sat:
Define test : nat -> prop by
  % This will generate an exception
  test 1 := process 1 P /\ assert 1 A /\ sat nil P A;
  % However, lsat is complete
  test 2 := process 1 P /\ assert 1 A /\ lsat (x :: nil) nil P A;
  % The excluded middle example is not provable using sat,
  % but is provable using lsat.
  test 3 := process 2 P /\ assert 2 A /\ sat nil P A;
  test 4 := process 2 P /\ assert 2 A /\ lsat (x :: nil) nil P A;
  test 5 := process 3 P /\ process 4 Q /\ assert 3 A /\ sat nil P A /\ sat nil Q A ;
  % The next two tests are to test tabling behaviour.
  % Running test 7 after running test 6 should still gives a positive answer. 
  test 6 := process 5 P /\ assert 4 A /\ sat nil P A ;
  test 7 := process 5 P /\ assert 5 A /\ sat nil P A. 

#assert_raise test 1.
#assert test 2.
#assert_not test 3.
#assert test 4.
#assert test 5.
