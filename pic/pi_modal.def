% vim: syntax=bedwyr: sw=2: ts=2: expandtab: ai:
%
% A specification of Modal Logic for pi-calculus.
% Based on the paper
%  "Modal logics for mobile processes", by R. Milner, J. Parrow and D. Walker
%  Theoretical Computer Science 114 (1993).
%
% This definition file implements the specification of MPW modal logic
% described in the paper:
%  Alwen Tiu. Model checking for pi-calculus using proof search.
%  Available online from http://rsise.anu.edu.au/~tiu
%
% Dependency: this file needs the pi.def (definition of late transition
% system for pi-calculus)

% Assume the o'ulas in the modal logic are in negation normal o'.
%
%
% The types of the logical constants:
%
% Formulas of MPW logic are given type o'.
% Propositional connectives:
%  conj : o' -> o' -> o'  (conjunction)
%  disj : o' -> o' -> o'  (disjunction)
%  tt : o'  (true)
%  ff : o' (false)
%
% The prefix 'dia' indicates the 'diamond' modality and 'box' indicates
% the box modality.
% 'Free' modalities:
%   boxMatch : name -> name -> o' -> o'. (match modality, e.g., [x = y] A)
%   diaMatch : name -> name -> o' -> o'. (diamond, e.g., <x = y> A)
%   boxDiff : name -> name -> o' -> o'. (mismatch modality, e.g., [x /= y] A)
%   diaDiff : name -> name -> o' -> o'. (diamond, e.g., <x /= y> A)
%   boxAct, diaAct : a -> o' -> o'. (free as)
%   boxOut, diaOut : name -> (name -> o') -> o'. (bound output)
%   boxIn, diaIn   : name -> (name -> o') -> o'. (bound input)
%   boxInL, diaInL : name -> (name -> o') -> o'. ('late' bound input)
%   boxInE, diaInE : name -> (name -> o') -> o'. ('early' bound input)

#include "pi.def".
#include "../basic.def".

Kind o'                type.
Type tt, ff            o'.
Type conj, disj           o' -> o' -> o'.
Type boxMatch, boxDiff,       
     boxActE, diaActE,
     diaMatch, diaDiff   name -> name -> o' -> o'.
Type boxAct, diaAct                 a -> o' -> o'.
Type boxOut, diaOut,
     boxIn, diaIn,
     boxInL, diaInL,
     boxInE, diaInE      name -> (name -> o') -> o'.

% A "lazy" but incomplete encoding.

% Define inductive diff : name -> name -> list (name * name) -> prop
% by diff X Y C := _if (X = Y) false (det_mem (X,Y) C).

Define inductive sat : p -> o' -> prop
by sat _ tt
 ; sat P (conj A B) := sat P A /\ sat P B
 ; sat P (disj A B) := sat P A \/ sat P B
 ; sat P (boxMatch X Y A) := (X = Y) -> sat P A
 ; sat P (diaMatch X Y A) := (X = Y) /\ sat P A
 ; sat P (boxDiff X Y A) := (X = Y -> false) -> sat P A
 ; sat P (diaDiff X Y A) := (X = Y -> false) /\ sat P A
 ; sat P (boxAct X A) := forall P1, one P X P1 -> sat P1 A
 ; sat P (diaAct X A) := exists P1, one P X P1 /\ sat P1 A
 ; sat P (boxActE X M A) := forall B, onep P (dn X) B -> sat (B M) A % RH: plain input modalities
 ; sat P (diaActE X M A) := exists B, onep P (dn X) B /\ sat (B M) A % RH: plain input modalities
 ; sat P (boxOut X A) :=
      forall Q, onep P (up X) Q -> nabla y, sat (Q y) (A y)
 ; sat P (diaOut X A) :=
      exists Q, onep P (up X) Q /\ nabla y, sat (Q y) (A y)
 ; sat P (boxIn X A) :=
      forall Q, onep P (dn X) Q -> forall y, sat (Q y) (A y)
 ; sat P (diaIn X A) :=
      exists Q, onep P (dn X) Q /\ exists y, sat (Q y) (A y)
 ; sat P (boxInL X A) :=
      forall Q, onep P (dn X) Q -> exists y, sat (Q y) (A y)
 ; sat P (diaInL X A) :=
      exists Q, onep P (dn X) Q /\ forall y, sat (Q y) (A y)
 ; sat P (boxInE X A) :=
      exists y, forall Q, onep P (dn X) Q -> sat (Q y) (A y)
 ; sat P (diaInE X A) :=
      forall y, exists Q, onep P (dn X) Q /\ sat (Q y) (A y)
 .


% A complete encoding: using explicit list of names.


Define inductive lsat : list name -> p -> o' -> prop
by lsat _ _ tt
 ; lsat L P (conj A B) := lsat L P A /\ lsat L P B
 ; lsat L P (disj A B) := lsat L P A \/ lsat L P B
 ; lsat L P (boxMatch X Y A) := X = Y -> lsat L P A
 ; lsat L P (diaMatch X Y A) := X = Y /\ lsat L P A
 ; lsat L P (boxDiff X Y A) := (X = Y -> false) -> lsat L P A % X /= Y -> ...
 ; lsat L P (diaDiff X Y A) := (X = Y -> false) /\ lsat L P A % X /= Y /\ ...
 ; lsat L P (boxAct X A) := forall P1, one P X P1 -> lsat L P1 A
 ; lsat L P (diaAct X A) := exists P1, one P X P1 /\ lsat L P1 A
 ; lsat L P (boxActE X M A) := nabla w, member M (w :: L) /\
                                 forall B, onep P (dn X) B -> lsat (w :: L) (B M) A
     % RH: plain input modalities (member M L checks input is allowed)
 ; lsat L P (diaActE X M A) := nabla w, member M (w :: L) /\
                                 exists B, onep P (dn X) B /\ lsat (w :: L) (B M) A 
     % RH: plain input modalities (member M L checks input is allowed)
 ; lsat L P (boxOut X A) :=
     forall Q, onep P (up X) Q -> nabla y, lsat (y :: L) (Q y) (A y)
 ; lsat L P (diaOut X A) :=
     exists Q, onep P (up X) Q /\ nabla y, lsat (y :: L) (Q y) (A y)
 ; lsat L P (boxIn X A) :=
     forall Q, onep P (dn X) Q ->
       nabla w, forall y, member y (w :: L) -> lsat (w :: L) (Q y) (A y)
 ; lsat L P (diaIn X A) :=
     exists Q, onep P (dn X) Q /\
       nabla w, exists y, member y (w :: L) /\ lsat (w :: L) (Q y) (A y)
 ; lsat L P (boxInL X A) :=
     forall Q, onep P (dn X) Q ->
       nabla w, exists y, member y (w :: L) /\ lsat (w :: L) (Q y) (A y)
 ; lsat L P (diaInL X A) :=
     exists Q, onep P (dn X) Q /\
       nabla w, forall y, member y (w :: L) -> lsat (w :: L) (Q y) (A y)
 ; lsat L P (boxInE X A) :=
     nabla w, exists y, member y (w :: L) /\
              forall Q, onep P (dn X) Q -> lsat (w :: L) (Q y) (A y)
 ; lsat L P (diaInE X A) :=
     nabla w, forall y, member y (w :: L) ->
              exists Q, onep P (dn X) Q /\ lsat (w :: L) (Q y) (A y)
 .

/*


P = (in x a\ in x b\ z) /\ Q = (in x a\ in x b\ match a b (out x x z)) /\ lsat (x :: nil) P (boxInL x a\ boxInL x b\ diaMatch a b (diaAct (up x x) tt)).


P = (in x a\ in x b\ z) /\ Q = (in x a\ in x b\ match a b (out x x z)) /\ lsat (x :: nil) Q (boxInL x a\ boxInL x b\ diaMatch a b (diaAct (up x x) tt)).


P = (in x a\ in x b\ z) /\ Q = (in x a\ in x b\ match a b (out x x z)) /\ lsat (x :: nil) P (boxInL x a\ boxInL x b\ diaMatch a b (boxAct (up x x) ff)).

P = (in x a\ in x b\ z) /\ Q = (in x a\ in x b\ match a b (out x x z)) /\ lsat (x :: nil) Q (boxInL x a\ boxInL x b\ diaMatch a b (boxAct (up x x) ff)).

*/

/*
Define inductive lsat : list name -> list (name * name) -> p -> o' -> prop
by lsat _ _ _ tt
 ; lsat L C P (conj A B) := lsat L C P A /\ lsat L C P B
 ; lsat L C P (disj  A B) := lsat L C P A \/ lsat L C P B
 ; lsat L C P (boxMatch X Y A) := (X = Y) -> lsat L C P A
 ; lsat L C P (diaMatch X Y A) := (X = Y) /\ lsat L C P A
 ; lsat L C P (boxDiff X Y A) := lsat L ((X,Y) :: C) P A
 ; lsat L C P (diaDiff X Y A) := diff X Y C /\ lsat L C P A
 ; lsat L C P (boxAct X A) := forall P1, one P X P1 -> lsat L C P1 A
 ; lsat L C P (diaAct X A) := exists P1, one P X P1 /\ lsat L C P1 A
 ; lsat L C P (boxOut X A) :=
     forall Q, onep P (up X) Q -> nabla y, lsat (y :: L) C (Q y) (A y)
 ; lsat L C P (diaOut X A) :=
     exists Q, onep P (up X) Q /\ nabla y, lsat (y :: L) C (Q y) (A y)
 ; lsat L C P (boxIn X A) :=
     forall Q, onep P (dn X) Q ->
       nabla w, forall y, member y (w :: L) -> lsat (w :: L) C (Q y) (A y)
 ; lsat L C P (diaIn X A) :=
     exists Q, onep P (dn X) Q /\
       nabla w, exists y, member y (w :: L) /\ lsat (w :: L) C (Q y) (A y)
 ; lsat L C P (boxInL X A) :=
     forall Q, onep P (dn X) Q ->
       nabla w, exists y, member y (w :: L) /\ lsat (w :: L) C (Q y) (A y)
 ; lsat L C P (diaInL X A) :=
     exists Q, onep P (dn X) Q /\
       nabla w, forall y, member y (w :: L) -> lsat (w :: L) C (Q y) (A y)
 ; lsat L C P (boxInE X A) :=
     nabla w, exists y, member y (w :: L) /\
              forall Q, onep P (dn X) Q -> lsat (w :: L) C (Q y) (A y)
 ; lsat L C P (diaInE X A) :=
     nabla w, forall y, member y (w :: L) ->
              exists Q, onep P (dn X) Q /\ lsat (w :: L) C (Q y) (A y)
 .
*/

/*
Define lsat : list name -> list (name * name) -> p -> o' -> prop
     , eqchk : name -> name -> list (name * name) -> prop
     , neqchk : name -> name -> list (name * name) -> prop
     , eqins : name -> name -> list (name * name) -> list (name * name) -> prop
by eqchk X Y L := det_or (X = Y) (det_or (member (X,Y) L) (member (Y,X) L))
 ; neqchk X Y L := _if (X = Y) false (_not (member (X,Y) L) /\ _not (member (Y,X) L))
 ; eqins X Y L R := _if (X = Y) (L = R) (
      (  exists L1 Zs XZs, insert (X,Y) L L1 /\ enum (z\ member (Y,z) L) Zs
      /\ map_fun (z\(X,z)) Zs XZs /\ foldr insert XZs L1 L2 )
   /\ (  exists L1 Zs YZs, insert (Y,X) L2 R1 /\ enum (z\ member (X,z) L) Zs
      /\ map_fun (z\(Y,z)) Zs YZs /\ foldr insert YZs R1 R )
   )
 ; lsat _ _ _ tt
 ; lsat L C P (conj A B) := lsat L C P A /\ lsat L C P B
 ; lsat L C P (disj  A B) := lsat L C P A \/ lsat L C P B
 ; lsat L C P (boxMatch X Y A) := eqins X Y C C1
     /\ println "aa" /\ println (lsat L C1 P A)
     /\ lsat L C1 P A
     /\ println "bb" /\ println (lsat L C1 P A)
 ; lsat L C P (diaMatch X Y A) := eqchk X Y C /\ lsat L C P A
 ; lsat L C P (boxDiff X Y A) := _if (neqchk X Y C) true  (lsat L C P A)
 ; lsat L C P (diaDiff X Y A) := _if (neqchk X Y C) false (lsat L C P A)
 ; lsat L C P (boxAct X A) := forall P1, one P X P1 -> lsat L C P1 A
 ; lsat L C P (diaAct X A) := exists P1, one P X P1 /\ lsat L C P1 A % /\ println (one P X P1 /\ lsat L C P1 A) 
 ; lsat L C P (boxOut X A) :=
     forall Q, onep P (up X) Q -> nabla y, lsat (y :: L) C (Q y) (A y)
 ; lsat L C P (diaOut X A) :=
     exists Q, onep P (up X) Q /\ nabla y, lsat (y :: L) C (Q y) (A y)
 ; lsat L C P (boxIn X A) :=
     forall Q, onep P (dn X) Q ->
       nabla w, forall y, member (y w) (w :: L) -> lsat (w :: L) C (Q y) (A y)
 ; lsat L C P (diaIn X A) :=
     exists Q, onep P (dn X) Q /\
       nabla w, exists y, member y (w :: L) /\ lsat (w :: L) C (Q y) (A y)
 ; lsat L C P (boxInL X A) :=
     forall Q, onep P (dn X) Q ->
       nabla w, exists y, member y (w :: L) /\ lsat (w :: L) C (Q y) (A y)
 ; lsat L C P (diaInL X A) :=
     exists Q, onep P (dn X) Q /\
       nabla w, forall y, member y (w :: L) -> lsat (w :: L) C (Q y) (A y)
 ; lsat L C P (boxInE X A) :=
     nabla w, exists y, member y (w :: L) /\
              forall Q, onep P (dn X) Q -> lsat (w :: L) C (Q y) (A y)
 ; lsat L C P (diaInE X A) :=
     nabla w, forall y, member y (w :: L) ->
              exists Q, onep P (dn X) Q /\ lsat (w :: L) C (Q y) (A y)
 .
*/



% Some examples ===============================================================

% Encoding the judgment x(y).0 |= <x(u)>[x = u] false.
Define assert : nat -> o' -> prop by
  % This judgment should be provable in MPW logic
  assert  1 (diaIn x (u\ (boxMatch x u ff)));
  % The 'excluded middle' on names
  assert  2
    (diaInL x (y\ diaInL x (u\ disj (diaMatch y u tt) (boxMatch y u ff))));
  % Process 3 and 4 are strongly bisimilar, hence should satisfy
  % the same set of assertions.
  % <x(y)>^L (<tau><tau> true ; <tau> true).
  assert  3 (diaInL x (y\ disj (diaAct tau (diaAct tau tt))
                            (diaAct tau tt))) ; 
  % Assertions to test tabling behaviours
  assert 4 (boxOut a (m\ boxIn a (x\ boxOut a (n\ boxMatch x m ff)))) ; 
  assert 5 (boxOut a (m\ boxIn a (x\ boxOut a (n\ boxMatch x n ff)))).

Define process : nat -> p -> prop
by process 1 (in x (y\ z))
 ; process 2 (in x (y\ in x u\ z))
 ; process 3 (in x u\ (plus (taup (taup z)) (taup z)))
 ; process 4 (in x u\ nu y\ ((plus (taup (taup z))
                            (plus (taup z)
                                  (taup (match u y (taup z)))))))
 ; process 5 (nu m\ out a m (in a (x\ nu n\ out a n z)))
 ; process 6 (in x u\ in x v\ (match u v (taup z)))
 ; process 7 (in x u\ in x y\ taup z)
 .



% Counterexample to the completeness of sat:
Define test : nat -> prop
by % This will generate an exception
   test 1 := process 1 P /\ assert 1 A /\ sat P A
   % However, lsat is complete
 ; test 2 := process 1 P /\ assert 1 A /\ lsat (x :: nil) P A
   % The excluded middle example is not provable using sat,
   % but is provable using lsat.
 ; test 3 := process 2 P /\ assert 2 A /\ sat P A
 ; test 4 := process 2 P /\ assert 2 A /\ lsat (x :: nil) P A
 ; test 5 := process 3 P /\ process 4 Q /\ assert 3 A /\ sat P A /\ sat Q A
   % The next two tests are to test tabling behaviour.
   % Running test 7 after running test 6 should still gives a positive answer. 
 ; test 6 := process 5 P /\ assert 4 A /\ sat P A
 ; test 7 := process 5 P /\ assert 5 A /\ sat P A
 .

#assert_raise test 1.
#assert test 2.
#assert_not test 3.
#assert test 4.
#assert test 5.

/*
process 5 P /\ A = (boxOut a (m\ boxInL a (x\ boxOut a (n\ boxMatch x n ff)))) /\ lsat (a :: x :: nil) P A.

process 2 P /\ A = diaInL x(x1\ diaInL x(x2\ boxDiff x1 x2 tt)) /\ lsat (x :: nil) P A.

process 2 P /\ A = diaInL x(x1\ diaInL x(x2\ disj (diaMatch x1 x2 tt) (boxMatch x1 x2 ff))) /\ lsat (x :: nil) P A.

process 2 P /\ A = diaInL x(x1\ diaInL x(x2\ disj (diaMatch x1 x2 tt) (diaDiff x1 x2 tt))) /\ lsat (x :: nil) P A.

process 2 P /\ A = diaInL x(x1\ diaInL x(x2\ disj (boxMatch x1 x2 tt) (diaDiff x1 x2 ff))) /\ lsat (x :: nil) P A.

process 2 P /\ A = diaInL x(x1\ diaInL x(x2\ disj (diaMatch x1 x2 tt) (boxDiff x1 x2 tt))) /\ lsat (x :: nil) P A.

process 2 P /\ A = diaInL x(x1\ diaInL x(x2\ disj (boxMatch x1 x2 tt) (boxDiff x1 x2 ff))) /\ lsat (x :: nil) P A.


nabla a b, bisim (plus (taup (match a b (taup z))) (plus (taup z) (taup (taup z)))) (plus (taup z) (taup (taup z))).

forall a b, bisim (plus (taup (match a b (taup z))) (plus (taup z) (taup (taup z)))) (plus (taup z) (taup (taup z))).

forall a, forall b, sat (plus (taup (match a b (taup z))) (plus (taup z) (taup (taup z)))) (diaAct tau (conj (boxMatch a b (diaAct tau tt)) (boxAct tau (diaMatch a b tt)))).

forall a, forall b, sat (plus (taup z) (taup (taup z))) (diaAct tau (conj (boxMatch a b (diaAct tau tt)) (boxAct tau (diaMatch a b tt)))).

*/

/*
quasi-open example:
 P = a\ (plus (in a x\ z) (in a x\ (taup z))) /\
 Q = a\ (plus (in a x\ z) (plus (in a x\ (taup z)) (in a x\ (match x a (taup z))))) /\
 A = a\ boxActE a x (conj (boxMatch a x (diaAct tau tt)) (boxAct tau (diaMatch a x tt))) /\
 forall a, sat (P a) (A a). 
*/
