% vim: ts=2: sw=2: expandtab: ai: syntax=bedwyr
#include "../basic.def". % to use list definition

Kind nm type.

Kind p type.
Type null p.
Type taup p -> p.
Type inp nm -> p -> p.
Type out nm -> p -> p.
% Type match nm -> nm -> p -> p.
Type bang p -> p.
Type plus p -> p -> p.
Type par p -> p -> p.
Type new (nm -> p) -> p.

Kind a type.
%
Type tau  a.
Type up    nm -> a.
Type dn    nm -> a.

Kind o' type.
%
Type tt    o'.
Type ff    o'.
Type neg   o' -> o'.
Type conj  o' -> o' -> o'.
Type disj  o' -> o' -> o'.
Type box   a -> o' -> o'.
Type dia   a -> o' -> o'.

Define one : p -> a -> p -> prop
 by one (taup P) tau P
  ; one (inp X P) (dn X) P
  ; one (out X P) (up X) P
  ; one (plus P Q) A R := one P A R
  ; one (plus P Q) A R := one Q A R
  % ; one (match X X P) A R := one P A R
  ; one (bang P) A (par Q (bang P)) := one P A Q
  ; one (bang P) tau (par (par P1 Q1) (bang P)) := exists X, one P (up X) P1 /\ one P (dn X) Q1
  ; one (par P Q) A (par P1 Q) := one P A P1
  ; one (par P Q) A (par P Q1) := one Q A Q1
  ; one (par P Q) tau (par P1 Q1) := exists X, one P (up X) P1 /\ one Q (dn X) Q1
  ; one (par P Q) tau (par P1 Q1) := exists X, one P (dn X) P1 /\ one Q (up X) Q1
  ; one (new P) A (new Q) := nabla x, one (P x) A (Q x)
  .

Define satisfy : p -> o' -> prop
by satisfy P tt := true
 ; satisfy P ff := false
 ; satisfy P (conj A B) := satisfy P A /\ satisfy P B
 ; satisfy P (disj A B) := satisfy P A \/ satisfy P B
 ; satisfy P (box X A) := forall Q, one P X Q -> satisfy Q A
 ; satisfy P (dia X A) := exists Q, one P X Q /\ satisfy Q A
 ; satisfy P (neg tt) := satisfy P ff
 ; satisfy P (neg tt) := satisfy P ff
 ; satisfy P (neg (box X A)) := satisfy P (dia X (neg A))
 ; satisfy P (neg (dia X A)) := satisfy P (box X (neg A))
 ; satisfy P (neg (conj A B)) := satisfy P (disj (neg A) (neg B))
 ; satisfy P (neg (disj A B)) := satisfy P (conj (neg A) (neg B))
 .


/*
%%%%%%%%%% example assertions

Type a nm.
Type b nm.
Type c nm.
Type d nm.

#assert satisfy (inp a null) (box (dn a) tt). % finds sol.
#assert satisfy (inp a null) (dia (dn a) tt). % finds sol.
#assert satisfy (inp a null) (box (up a) tt). % finds sol. vacuously (lhs of -> fail)
#assert_not satisfy (inp a null) (dia (up a) tt). % no sol. because no output transition


% there exists a transition and forall transition satisfy tt
#assert satisfy (inp a null) (conj (dia (dn a) tt) (box (dn a) tt)).
#assert satisfy (inp a (inp b null)) (dia (dn a) (dia (dn b) tt)).
#assert satisfy (inp a (inp b null)) (box (dn a) (dia (dn b) tt)).
*/

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%5
% Bisimulation

Define
   coinductive bisim : p -> p -> prop
 % bisim_step* below are for tabling edges of bisim-graph
 , coinductive bisim_step_tbl : nat -> p -> p -> a -> p -> p -> prop
 , bisim_step : p -> p -> a -> p -> p -> prop
 , bisim_step_1st : p -> p -> a -> p -> prop
 , bisim_step_2nd : p -> p -> a -> p -> prop
 , bisim_step_label : p -> p -> a -> prop
 , coinductive bisim_stepp_tbl : nat -> p -> p -> a -> (name -> p) -> (name -> p) -> prop
 , bisim_step : p -> p -> a -> p -> (name -> p) -> prop
 , bisim_step_1st : p -> p -> (name -> a) -> (name -> p) -> prop
 , bisim_step_2nd : p -> p -> (name -> a) -> (name -> p) -> prop
 , bisim_step_label : p -> p -> (name -> a) -> prop

by bisim P P
% ; bisim (bang P) (bang Q) := bisim P Q
 ; bisim P Q :=
      (forall P1 X, one P X P1
      -> exists Q1, one Q X Q1
                 /\ bisim_step P Q X P1 Q1 /\ bisim P1 Q1)
   /\ (forall Q1 X, one Q X Q1
      -> exists P1, one P X P1
                 /\ bisim_step P Q X P1 Q1 /\ bisim P1 Q1)
 ; bisim_step_tbl N P Q X P1 Q1
 ; bisim_step P Q X P1 Q1 := bisim_step_tbl 0 P Q X P1 Q1
                          /\ bisim_step_1st P Q X P1
                          /\ bisim_step_2nd P Q X Q1
                          /\ bisim_step_label P Q X
 ; bisim_step_1st P Q X P1 := bisim_step_tbl 1 P Q X P1 null
 ; bisim_step_2nd P Q X Q1 := bisim_step_tbl 2 P Q X null Q1
 ; bisim_step_label P Q X := bisim_step_tbl 3 P Q X null null
 .

