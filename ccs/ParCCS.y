-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParCCS where
import AbsCCS
import LexCCS
import ErrM

}

%name pP P
%name pP1 P1
%name pP2 P2
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '(' { PT _ (TS _ 2) }
  ')' { PT _ (TS _ 3) }
  '+' { PT _ (TS _ 4) }
  '-' { PT _ (TS _ 5) }
  '.' { PT _ (TS _ 6) }
  '0' { PT _ (TS _ 7) }
  'new' { PT _ (TS _ 8) }
  'tau' { PT _ (TS _ 9) }
  '|' { PT _ (TS _ 10) }

L_LIdent { PT _ (T_LIdent $$) }


%%

LIdent    :: { LIdent} : L_LIdent { LIdent ($1)}

P :: { P }
P : P1 '+' P { AbsCCS.PLUS $1 $3 } | P1 { $1 }
P1 :: { P }
P1 : P2 '|' P1 { AbsCCS.PAR $1 $3 } | P2 { $1 }
P2 :: { P }
P2 : '!' P2 { AbsCCS.BANG $2 }
   | 'tau' '.' P2 { AbsCCS.TAUP $3 }
   | LIdent '.' P2 { AbsCCS.INP $1 $3 }
   | '-' LIdent '.' P2 { AbsCCS.OUT $2 $4 }
   | '0' { AbsCCS.NULL }
   | '(' 'new' LIdent ')' P2 { AbsCCS.NEW $3 $5 }
   | '(' P ')' { $2 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

