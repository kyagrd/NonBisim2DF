% spi.thm
Specification "spi".

Type a,b,c nm.

Close nm, tm, ty.
Close p, pa.

Define barb : p -> a -> prop by barb P X := exists A, {one P X A}.
Define test : p -> a -> prop by test P X := exists Q, {taus P Q} /\ barb Q X.

Define test_eq : p -> p -> prop
by test_eq P Q := forall R X, (test (par P R) X -> test (par Q R) X)
                           /\ (test (par Q R) X -> test (par P R) X).

/*
Abella < Query A = nm a /\ B = nm b /\ test (par (out A A zero) (in A x\out B B zero)) X.
Found solution:
A = nm a
B = nm b
X = up (nm a)

Found solution:
A = nm a
B = nm b
X = dn (nm a)

Found solution:
A = nm a
B = nm b
X = up (nm b)

No more solutions.
*/

Theorem syn_empty_false : forall M T, {syn M T} -> false.
% Proof:
induction on 1. intros. case H1.
  backchain IH.
  backchain IH.
  backchain IH.
  backchain IH.
  backchain IH.
% Q.E.D.

Theorem mnd_empty_false : forall M N T, {mnd M N T} -> false.
% Proof:
induction on 1. intros. case H1.
  backchain IH.
  backchain IH.
  backchain IH.
  backchain IH.
  backchain IH.
% Q.E.D.

Theorem syn_ex1 : forall X TX Y TY, {syn X TX, syn Y TY |- syn (pr X Y) (t_pr TX TY)}. 
search.

Theorem syn_ex2 : forall X TX Y TY, {syn (en X Y) (t_en TX TY), syn Y TY |- syn X TX}.
search.

Theorem mnd_ex1 : forall X1 X2 TX Y1 Y2 TY,
    {mnd X1 X2 TX, mnd Y1 Y2 TY |- mnd (pr X1 Y1) (pr X2 Y2) (t_pr TX TY)}. 
search.

Theorem mnd_ex2 : forall X1 X2 TX Y1 Y2 TY,
     {mnd (en X1 Y1) (en X2 Y2) (t_en TX TY), mnd Y1 Y2 TY |- mnd X1 X2 TX}.
search.

Define name : tm -> prop by
    nabla x, name x.    

Define same_name : tm -> tm -> prop by
    nabla x, same_name x x.

Define of_ctx : olist -> prop
by of_ctx nil
 ; nabla x, of_ctx (of x T :: C) := of_ctx C.

Theorem of_ctx_tail : forall E C, of_ctx (E :: C) -> of_ctx C.
intros. case H1. search.
    
Theorem member_prune : forall L E, nabla (x : tm),
  member (E x) L -> exists F, E = x\ F.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Theorem of_name : forall C E, of_ctx C -> member E C ->
    exists X T, E = of X T /\ name X.
induction on 1. intros. case H1.
  case H2.
  case H2.
    search.
    apply member_prune to H4. backchain IH.    

Theorem member_nabla_false : forall T L,
      nabla x, member (of x T) L -> false.
induction on 1. intros. case H1. apply IH to H2.

Theorem of_ctx_uniq : forall C E T1 T2, of_ctx C ->
      member (of E T1) C -> member (of E T2) C -> T1 = T2.
induction on 2. intros. case H2.
   case H3.
      search.
      case H1. apply member_nabla_false to H4.
   case H3.
      case H1. apply member_nabla_false to H4.
      case H1. apply IH to _ H4 H5. search.

Theorem of_uniq : forall C E T1 T2, of_ctx C ->
     {C |- of E T1} -> {C |- of E T2} -> T1 = T2.
induction on 2. intros. case H2.    
case H3. search.
      apply of_name to _ H5. case H4. case H6.
case H3. apply IH to _ H4 H6. apply IH to _ H5 H7. search.
      apply of_name to _ H7. case H6. case H8.
case H3. apply IH to _ H4 H6. apply IH to _ H5 H7. search.
      apply of_name to _ H7. case H6. case H8.
apply of_name to _ H5. case H4. case H6.
      case H3. apply of_name to _ H8. case H7.
      apply of_ctx_uniq to _ H5 H8. search.

Theorem member_of : forall M T C, member (of M T) C -> {C |- of M T}.
induction on 1. intros. case H1. search. apply IH to H2. search.

Theorem of_pr1 : forall M1 M2 T1 T2 C, of_ctx C ->
      {C |- of (pr M1 M2) (t_pr T1 T2)} -> {C |- of M1 T1}.
intros. case H2. search. apply of_name to _ H4. case H3. case H5.
     
Theorem of_pr2 : forall M1 M2 T1 T2 C, of_ctx C ->
      {C |- of (pr M1 M2) (t_pr T1 T2)} -> {C |- of M2 T2}.
intros. case H2. search. apply of_name to _ H4. case H3. case H5.

Theorem of_en1 : forall M1 M2 T1 T2 C, of_ctx C ->
      {C |- of (en M1 M2) (t_en T1 T2)} -> {C |- of M1 T1}.
intros. case H2. search. apply of_name to _ H4. case H3. case H5.
     
Theorem of_en2 : forall M1 M2 T1 T2 C, of_ctx C ->
      {C |- of (en M1 M2) (t_en T1 T2)} -> {C |- of M2 T2}.
intros. case H2. search. apply of_name to _ H4. case H3. case H5.

Define ctx_zip : olist -> olist -> olist -> prop
by ctx_zip nil nil nil
 ; ctx_zip (syn M T :: L1) (syn N T :: L2) (mnd M N T :: L) := ctx_zip L1 L2 L.
      
Define syn_ctx : olist -> olist -> prop
by syn_ctx C nil := of_ctx C
 ; syn_ctx C (syn M T :: L) := {C |- of M T} /\ syn_ctx C L.

Theorem syn_of_ctx : forall C L, syn_ctx C L -> of_ctx C.
induction on 1. intros. case H1. search. backchain IH.
  
Define mnd_ctx : olist -> olist -> olist -> prop
by mnd_ctx C1 C2 nil := of_ctx C1 /\ of_ctx C2
 ; mnd_ctx C1 C2 (mnd M N T :: L) := {C1 |- of M T} /\ {C2 |- of N T} /\ mnd_ctx C1 C2 L.

Theorem mnd_of_ctx : forall C1 C2 L, mnd_ctx C1 C2 L -> of_ctx C1 /\ of_ctx C2.
induction on 1. intros. case H1. search. backchain IH.

Theorem syn_ctx_tail : forall M T L C,
      syn_ctx C (syn M T :: L) -> syn_ctx C L.
intros. case H1. search.

Theorem mnd_ctx_tail : forall M N T L C1 C2,
      mnd_ctx C1 C2 (mnd M N T :: L) -> mnd_ctx C1 C2 L.
intros. case H1. search.
     
Theorem zip_prune : forall L1 L2 L, nabla (x : tm),
    ctx_zip (L1 x) (L2 x) L -> exists L1' L2', L1 = x\ L1' /\ L2 = x\ L2'.
induction on 1. intros. case H1.
  search.
  apply IH to H2. search.

Theorem mnd_syn_ctx : forall L L1 L2 C1 C2,
      ctx_zip L1 L2 L -> mnd_ctx C1 C2 L -> syn_ctx C1 L1 /\ syn_ctx C2 L2.
induction on 2. intros. case H2.
      case H1. search.
      case H1. apply IH to _ H5. search.

Define append : olist -> olist -> olist -> prop
by append nil L L
 ; append (O :: L1) L2 (O :: L) := append L1 L2 L.

Theorem append_nil : forall L1 L2, append L1 nil L2 -> L1 = L2.
induction on 1. intros. case H1. search. apply IH to H2. search.
       
Theorem append_uniq : forall L1 L2 L L',
       append L1 L2 L -> append L1 L2 L' -> L = L'.      
induction on 1. intros. case H1.
case H2. search. case H2. apply IH to H3 H4. search.

Theorem append_member : forall L1 L2 L E, append L1 L2 L ->
       member E L -> member E L1 \/ member E L2.
induction on 2. intros. case H2.
       case H1. search. search.     
       case H1. search. apply IH to H4 H3. case H5. search. search.

Theorem syn_member : forall E C L, syn_ctx C L ->
       member E L -> exists M T, E = syn M T.
induction on 1. intros. case H1.
       case H2.
       case H2. search. backchain IH.

Theorem syn_member_of : forall M T L C, syn_ctx C L ->
       member (syn M T) L -> {C |- of M T}.
induction on 1. intros. case H1.
       case H2.
       case H2. search. backchain IH.     

Theorem syn_of : forall C L M T, syn_ctx C L -> {L |- syn M T} -> {C |- of M T}.
induction on 2. intros. case H2.
       apply IH to _ H3. apply IH to _ H4. search.     
       apply IH to _ H3. backchain of_pr1. backchain syn_of_ctx.
       apply IH to _ H3. backchain of_pr2. backchain syn_of_ctx.
       apply IH to _ H3. apply IH to _ H4. search.
       apply IH to _ H4. backchain of_en1. backchain syn_of_ctx.
       apply syn_member to _ H4. case H3. backchain syn_member_of.

/*
Theorem of_name' : forall C L CL E,
       syn_ctx C L -> append L C CL -> member E CL ->
       exists X T, (E = of X T /\ name X) \/ E = syn X T.
induction on 1. intros. case H1.
       case H2. apply of_name to _ H3. exists X, T. search.
       case H2. case H3. exists M, T. search. backchain IH.

Theorem syn_of' : forall C L CL M T, syn_ctx C L ->
      append L C CL -> {CL |- syn M T} -> {C |- of M T}.
induction on 3. intros. case H3.
       apply IH to _ _ H4. apply IH to _ _ H5. search.     
       apply IH to _ _ H4. backchain of_pr1. backchain syn_of_ctx.
       apply IH to _ _ H4. backchain of_pr2. backchain syn_of_ctx.
       apply IH to _ _ H4. apply IH to _ _ H5. search.
       apply IH to _ _ H5. backchain of_en1. backchain syn_of_ctx.
       apply of_name' to _ _ H5. apply append_member to H2 H5. case H7.
         apply syn_member to _ H8. case H6. case H4. backchain syn_member_of.
         apply of_name to _ H8. backchain syn_of_ctx. case H9. case H4.
*/

Theorem mnd_syn_ctx : forall L L1 L2 C1 C2,
     mnd_ctx C1 C2 L -> ctx_zip L1 L2 L ->
     syn_ctx C1 L1 /\ syn_ctx C2 L2.
induction on 1. intros. case H1.
  case H2. search.
  case H2. apply IH to H5 H6. search.
       
Theorem member_mnd_syn : forall L L1 L2 C1 C2 M N T,
       mnd_ctx C1 C2 L -> ctx_zip L1 L2 L ->
       member (mnd M N T) L -> member (syn M T) L1 /\ member (syn N T) L2.     
induction on 2. intros. apply mnd_syn_ctx to H1 H2. case H2.
   case H3.
   case H1. case H3. search. apply IH to _ H6 H10. search.

Theorem mnd_member : forall E C1 C2 L, mnd_ctx C1 C2 L ->
       member E L -> exists M N T, E = mnd M N T.
induction on 1. intros. case H1.
       case H2.
       case H2. search. backchain IH.     
       
Theorem mnd_syn : forall L L1 L2 C1 C2 M N T, mnd_ctx C1 C2 L -> ctx_zip L1 L2 L ->
    {L |- mnd M N T} -> {L1 |- syn M T} /\ {L2 |- syn N T}.  
induction on 3. intros. case H3.
  apply IH to _ _ H4. apply IH to _ _ H5. search.
  apply IH to _ _ H4. search.
  apply IH to _ _ H4. search.   
  apply IH to _ _ H4. apply IH to _ _ H5. search.
  apply IH to _ _ H4. apply IH to _ _ H5. search.
  apply mnd_member to _ H5. case H4. apply member_mnd_syn to _ _ H5. search.       

Theorem mnd_pr : forall C1 C2 L M1 M2 N1 N2 T1 T2, mnd_ctx C1 C2 L ->
    {L |- mnd M1 N1 T1} -> {L |- mnd M2 N2 T2} ->
    {L |- mnd (pr M1 M2) (pr N1 N2) (t_pr T1 T2)}.
intros. search.
   
Theorem mnd_pr1 : forall C1 C2 L M1 M2 N1 N2 T1 T2, mnd_ctx C1 C2 L ->
    {L |- mnd (pr M1 M2) (pr N1 N2) (t_pr T1 T2)} -> {L |- mnd M1 N1 T1}.
intros. search.

Theorem mnd_pr2 : forall C1 C2 L M1 M2 N1 N2 T1 T2, mnd_ctx C1 C2 L ->
    {L |- mnd (pr M1 M2) (pr N1 N2) (t_pr T1 T2)} -> {L |- mnd M2 N2 T2}.
intros. search.

Theorem mnd_en : forall C1 C2 L M1 M2 N1 N2 T1 T2, mnd_ctx C1 C2 L ->
    {L |- mnd M1 N1 T1} -> {L |- mnd M2 N2 T2} -> 
    {L |- mnd (en M1 M2) (en N1 N2) (t_en T1 T2)}.     
intros. search.

Theorem mnd_en' : forall C1 C2 L M1 M2 N1 N2 T1 T2, mnd_ctx C1 C2 L ->
    {L |- mnd (en M1 M2) (en N1 N2) (t_en T1 T2)} ->
    {L |- mnd M2 N2 T2} -> {L |- mnd M1 N1 T1}.    
intros. search.
     
Theorem mnd_ctx_zip_exists : forall L C1 C2,
     mnd_ctx C1 C2 L -> exists L1 L2, ctx_zip L1 L2 L.
induction on 1. intros. case H1. search. apply IH to H4. search.

Theorem ctx_zip_uniq : forall L1 L2 L L',
     ctx_zip L1 L2 L -> ctx_zip L1 L2 L' -> L = L'.
induction on 1. intros. case H1.
  case H2. search.
  case H2. apply IH to H3 H4. search.

Theorem ctx_unzip_uniq : forall L1 L2 L3 L4 L,  
     ctx_zip L1 L2 L -> ctx_zip L3 L4 L -> L1 = L3 /\ L2 = L4.
induction on 1. intros. case H1.
     case H2. search.   
     case H2. apply IH to H3 H4. search.
     
Theorem mnd_syn_exists : forall L C1 C2, mnd_ctx C1 C2 L ->
     exists L1 L2, ctx_zip L1 L2 L ->
     forall M N T, {L |- mnd M N T} ->
    {L1 |- syn M T} /\ {L2 |- syn N T}.
induction on 1. intros. case H1.
     % Subgoal 1     
     exists nil, nil. intros. apply mnd_syn to _ H4 H5. search.
     % Subgoal 2
     apply IH to H4. exists syn M T :: L2, syn N T :: L3. intros.
     apply mnd_syn to _ _ H7. search.
      
Theorem mnd_of : forall L C1 C2 M N T, mnd_ctx C1 C2 L ->
    {L |- mnd M N T} -> {C1 |- of M T} /\ {C2 |- of N T}.  
intros.
apply mnd_ctx_zip_exists to H1.
apply mnd_syn to H1 H3 H2.
apply mnd_syn_ctx to H1 H3.
split. backchain syn_of. backchain syn_of.
      
Theorem mnd_ctx_tail : forall C1 C2 L M N T,
     mnd_ctx C1 C2 (mnd M N T :: L) -> mnd_ctx C1 C2 L.
intros. case H1. search.

Theorem mnd_ctx_cons : forall C1 C2 L M N T,
     mnd_ctx C1 C2 L -> {L |- mnd M N T} -> mnd_ctx C1 C2 (mnd M N T :: L).
intros. unfold.
     apply mnd_of to _ H2. search.   
     apply mnd_of to _ H2. search.
     search.
     
Define unicity : olist -> prop
by unicity L := forall M N T, {L |- mnd M N T} ->
     (forall R, {L |- mnd M R T} -> R = N ) /\
     (forall R, {L |- mnd R N T} -> R = M ).

Theorem unicity_tail : forall M N T L,
      unicity (mnd M N T :: L) -> unicity L.
intros. case H1. unfold. intros. apply H2 to H3. split.
      intros. backchain H4.
      intros. backchain H5.

Theorem unicity_cons : forall M N T C1 C2 L, mnd_ctx C1 C2 L ->
      unicity L -> {L |- mnd M N T} -> unicity (mnd M N T :: L).
induction on 3. intros. case H3.
  % Subgoal 1
  apply IH to _ _ H4. apply IH to _ _ H5. case H6. case H7. unfold.
  intros. apply mnd_pr to _ H4 H5. cut H10 with H11. split.
      % Subgoal 1.1
      intros. cut H13 with H11.
      assert {L, mnd M1 N1 T1 |- mnd M3 N3 T3}.
      assert {L, mnd M1 N1 T1 |- mnd M3 R T3}.
      apply H8 to H15. backchain H17.
      % Subgoal 1.2    
      intros. cut H13 with H11.
      assert {L, mnd M1 N1 T1 |- mnd M3 N3 T3}.
      assert {L, mnd M1 N1 T1 |- mnd R N3 T3}.
      apply H8 to H15. backchain H18.    
  % Subgoal 2
  apply IH to _ _ H4. case H5. unfold.
  intros. apply mnd_pr1 to _ H4. cut H7 with H8. split.
      % Subgoal 2.1    
      intros. cut H10 with H8.
      assert {L, mnd (pr M M2) (pr N N2) (t_pr T T2) |- mnd M1 N1 T1}.
      assert {L, mnd (pr M M2) (pr N N2) (t_pr T T2) |- mnd M1 R T1}.
      apply H6 to H12. backchain H14.
      % Subgoal 2.2
      intros. cut H10 with H8.
      assert {L, mnd (pr M M2) (pr N N2) (t_pr T T2) |- mnd M1 N1 T1}.
      assert {L, mnd (pr M M2) (pr N N2) (t_pr T T2) |- mnd R N1 T1}.
      apply H6 to H12. backchain H15.
  % Subgoal 3
  apply IH to _ _ H4. case H5. unfold.
  intros. apply mnd_pr2 to _ H4. cut H7 with H8. split.
      % Subgoal 2.1    
      intros. cut H10 with H8.
      assert {L, mnd (pr M1 M) (pr N1 N) (t_pr T1 T) |- mnd M2 N2 T2}.
      assert {L, mnd (pr M1 M) (pr N1 N) (t_pr T1 T) |- mnd M2 R T2}.
      apply H6 to H12. backchain H14.
      % Subgoal 2.2
      intros. cut H10 with H8.
      assert {L, mnd (pr M1 M) (pr N1 N) (t_pr T1 T) |- mnd M2 N2 T2}.    
      assert {L, mnd (pr M1 M) (pr N1 N) (t_pr T1 T) |- mnd R N2 T2}.
      apply H6 to H12. backchain H15.    
  % Subgoal 4
  apply IH to _ _ H4. apply IH to _ _ H5. case H6. case H7. unfold.
  intros. apply mnd_en to _ H4 H5. cut H10 with H11. split.
      % Subgoal 1.1
      intros. cut H13 with H11.
      assert {L, mnd M1 N1 T1 |- mnd M3 N3 T3}.
      assert {L, mnd M1 N1 T1 |- mnd M3 R T3}.
      apply H8 to H15. backchain H17.
      % Subgoal 1.2    
      intros. cut H13 with H11.
      assert {L, mnd M1 N1 T1 |- mnd M3 N3 T3}.
      assert {L, mnd M1 N1 T1 |- mnd R N3 T3}.
      apply H8 to H15. backchain H18.
  % Subgoal 5
  apply IH to _ _ H4. apply IH to _ _ H5. case H6. case H7. unfold.
  intros. apply mnd_en' to _ H4 H5. cut H10 with H11. split.
      % Subgoal 5.1    
      intros. cut H13 with H11.
      assert {L, mnd (en M M2) (en N N2) (t_en T T2) |- mnd M1 N1 T1}.
      assert {L, mnd (en M M2) (en N N2) (t_en T T2) |- mnd M1 R T1}.
      apply H8 to H15. backchain H17.
      % Subgoal 5.2
      intros. cut H13 with H11.
      assert {L, mnd (en M M2) (en N N2) (t_en T T2) |- mnd M1 N1 T1}.
      assert {L, mnd (en M M2) (en N N2) (t_en T T2) |- mnd R N1 T1}.
      apply H8 to H15. backchain H18.
  % Subgoal 6
  apply mnd_member to H1 H5. case H4. unfold. intros. split.
      intros. assert {L |- mnd M N T}. cut H6 with H8. cut H7 with H8.
      case H2. apply H11 to H9. backchain H12.
      intros. assert {L |- mnd M N T}. cut H6 with H8. cut H7 with H8.
      case H2. apply H11 to H9. backchain H13.

Define eqknow : olist -> prop
by eqknow L := forall M1 M2 N1 N2 L1 L2 T1 T2, ctx_zip L1 L2 L
     -> {L |- mnd (en M1 M2) (en N1 N2) (t_en T1 T2)}
     -> ( {L1 |- syn M2 T2} \/ {L2 |- syn N2 T2} )
     -> {L |- mnd M2 N2 T2}.

Theorem or_obj_comm : forall L1 L2 P1 P2,
      {L1 |- P1} \/ {L2 |- P2} -> {L2 |- P2} \/ {L1 |- P1}.
intros. case H1. search. search.
    
Theorem or_syn_comm : forall L1 L2 M N T,
      {L1 |- syn M T} \/ {L2 |- syn N T} -> {L2 |- syn N T} \/ {L1 |- syn M T}.
intros.
backchain or_obj_comm with L1 = L1, L2 = L2, P1 = syn M T, P2 = syn N T.
% becase of this bug https://github.com/abella-prover/abella/issues/77
% object sequent *context* should be explicitly provided for workaround
% using the long list of hints provided after "with". 
       
Theorem eqknow_tail' : forall M N T L,
      eqknow (mnd M N T :: L) -> {L |- mnd M N T} -> eqknow L.    
intros. case H1. intros. unfold. intros. case H6.
  % Subgoal 1     
  assert {L, mnd M N T |- mnd (en M1 M2) (en N1 N2) (t_en T1 T2)}.     
  assert {L1, syn M T |- syn M2 T2}.
  assert {L1, syn M T |- syn M2 T2} \/ {L2, syn N T |- syn N2 T2}.
  assert ctx_zip (syn M T :: L1) (syn N T :: L2) (mnd M N T :: L).
  apply H3 to H11 H8 H10. cut H12 with H2. search.
  % Subgoal 2.     
  assert {L, mnd M N T |- mnd (en M1 M2) (en N1 N2) (t_en T1 T2)}.
  assert {L2, syn N T |- syn N2 T2}.
  assert {L2, syn N T |- syn N2 T2} \/ {L1, syn M T |- syn M2 T2}.
  apply or_syn_comm to H10 with L2 = syn M T :: L1, L1 = syn N T :: L2.     
  assert ctx_zip (syn M T :: L1) (syn N T :: L2) (mnd M N T :: L).     
  apply H3 to H12 H8 H11. cut H13 with H2. search.
     
Theorem or_obj_strenthen : forall L1 L2 P1 P2 A1 A2, 
     {L1 |- P1} \/ {L2 |- P2} -> {L1, A1 |- P1} \/ {L2, A2 |- P2}.
intros. case H1. left. search. right. search.

Theorem or_obj_cut : forall L1 L2 P1 P2 A1 A2,
     {L1 |- A1} -> {L2 |- A2} ->      
     {L1, A1 |- P1} \/ {L2, A2 |- P2} ->
     {L1 |- P1} \/ {L2 |- P2}.
intros. case H3.
      left.  cut H4 with H1. search.
      right. cut H4 with H2. search.

Theorem eqknow_cons : forall M N T C1 C2 L, mnd_ctx C1 C2 L ->
      eqknow L -> {L |- mnd M N T} -> eqknow (mnd M N T :: L).
induction on 3. intros. case H3.
  % Subgoal 1
  apply IH to _ _ H4. apply IH to _ _ H5. unfold. intros.
  apply mnd_pr to _ H4 H5. cut H9 with H11.
  case H8. apply mnd_syn to _ _ H11.
  apply or_obj_cut to H14 H15 H10
   with L1 = L3, A1 = syn (pr M1 M2) (t_pr T1 T2), P1 = syn M4 T4,
        L2 = L4, A2 = syn (pr N1 N2) (t_pr T1 T2), P2 = syn N4 T4.
  case H2. apply H17 to H13 H12 H16. search.
  % Subgoal 2
  apply IH to _ _ H4. unfold. intros.
  apply mnd_pr1 to _ H4. cut H7 with H9.
  case H6. apply mnd_syn to _ _ H9. 
  apply or_obj_cut to H12 H13 H8
   with L1 = L3, A1 = syn M T, P1 = syn M3 T3,
        L2 = L4, A2 = syn N T, P2 = syn N3 T3.
  case H2. apply H15 to H11 H10 H14. search.
  % Subgoal 3
  apply IH to _ _ H4. unfold. intros.
  apply mnd_pr2 to _ H4. cut H7 with H9.
  case H6. apply mnd_syn to _ _ H9.
  apply or_obj_cut to H12 H13 H8
   with L1 = L3, A1 = syn M T, P1 = syn M3 T3,
        L2 = L4, A2 = syn N T, P2 = syn N3 T3.
  case H2. apply H15 to H11 H10 H14. search.
  % Subgoal 4
  apply IH to _ _ H4. apply IH to _ _ H5. unfold. intros.
  apply mnd_en to _ H4 H5. cut H9 with H11.
  case H8. apply mnd_syn to _ _ H11.
  apply or_obj_cut to H14 H15 H10
   with L1 = L3, A1 = syn (en M1 M2) (t_en T1 T2), P1 = syn M4 T4,
        L2 = L4, A2 = syn (en N1 N2) (t_en T1 T2), P2 = syn N4 T4.
  case H2. apply H17 to H13 H12 H16. search.
  % Subgoal 5
  apply IH to _ _ H4. apply IH to _ _ H5. unfold. intros.
  apply mnd_en' to _ H4 H5. cut H9 with H11.
  case H8. apply mnd_syn to _ _ H11.
  apply or_obj_cut to H14 H15 H10
   with L1 = L3, A1 = syn M T, P1 = syn M3 T3,
        L2 = L4, A2 = syn N T, P2 = syn N3 T3.
  case H2. apply H17 to H13 H12 H16. search.
  % Subgoal 6
  apply mnd_member to H1 H5. case H4. unfold. intros.
  assert {L |- mnd M N T}. cut H7 with H9.
  case H2. case H6. apply mnd_syn to _ _ H9.
  apply or_obj_cut to H13 H14 H8
   with L1 = L3, A1 = syn M T, P1 = syn M3 T3,
        L2 = L4, A1 = syn N T, P2 = syn N3 T3.
  apply H11 to H12 H10 H15. search.

% This defintion is not yet fully describes the consistency
% in the traced-based bisimmulation paper but it is just enough
% for Lemma 13 to hold. We would need to enforce additional condition
% other than just the usual well-typedness by mnd_ctx because
% the left and right terms of mnd should be of the same structure
% to be consistent (e.g. var rule enforces exactly the same variables);
% Without the additional conditions, lemmas involving composition of
% consistent obersrver theories would not hold
Define consistent : olist -> prop
by consistent L := (exists C1 C2, mnd_ctx C1 C2 L) /\ unicity L /\ eqknow L.

% Lemmma 13 of https://arxiv.org/abs/0901.2166
% Alwen Tiu
% A Trace Based Bisimulation for the Spi Calculus
Theorem consistent_cons : forall M N T L, 
    consistent L -> {L |- mnd M N T} -> consistent (mnd M N T :: L).
intros. case H1. unfold.
       exists C1, C2. backchain mnd_ctx_cons.
       backchain unicity_cons.
       backchain eqknow_cons.

Define consistent' : olist -> olist -> olist -> prop
by consistent' C1 C2 L := mnd_ctx C1 C2 L /\ unicity L /\ eqknow L.
      
Theorem consistent_tail' : forall M N T L,
     consistent (mnd M N T :: L) -> {L |- mnd M N T} -> consistent L.
induction on 1. intros. case H1. unfold.
  % Subgoal 1
  exists C1, C2.
  backchain mnd_ctx_tail.
  % Subgoal 2
  backchain unicity_tail.
  % Subgoal 3.   
  backchain eqknow_tail'.

Define compose_mnd_ctx : olist -> olist -> olist -> prop
by compose_mnd_ctx nil nil nil
 ; compose_mnd_ctx (mnd M R T :: L1) (mnd R N T :: L2) (mnd M N T :: L)
     := compose_mnd_ctx L1 L2 L.

Theorem mnd_ctx_compose : forall C1 C C2 L1 L2 L,
      mnd_ctx C1 C L1 -> mnd_ctx C C2 L2 ->
      compose_mnd_ctx L1 L2 L -> mnd_ctx C1 C2 L.
induction on 3. intros. case H3.
      case H1. case H2. unfold. search. search.
      case H1. case H2. unfold. search. search. backchain IH.

/*
Theorem compose_unicity : forall L1 L2 L,
      unicity L1 -> unicity L2 ->
      compose_mnd_ctx L1 L2 L -> unicity L.
induction on 3. intros. case H3.

      search.

apply unicity_tail to H1. apply unicity_tail to H2.    
apply IH to _ _ H4.
case H1. case H2. case H5. case H6. case H7.
unfold. intros. split.
intros. 
*

      
Theorem compose_consistent_mnd_ctx : forall C1 C C2 L1 L2 L,
      consistent' C1 C L1 -> consistent' C C2 L2 ->
      compose_mnd_ctx L1 L2 L -> consistent' C1 C2 L.
induction on 3. intros. case H3.
  case H1. case H2. unfold.
      case H4. case H7. unfold. search. search.
      search.
      search.
  case H1. case H2. unfold.      
      case H5. case H8. unfold. search. search. backchain compose_mnd_ctx.

apply unicity_tail to H6. apply unicity_tail to H9.    
case H6. case H9. unfold. intros. split.
intros. apply H11 to H13.



      skip.   % TODO unicity.
      skip.
      */